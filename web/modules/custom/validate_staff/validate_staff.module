<?php

/**
 * @file
 * Validate staff module.
 */

use Drupal\user\Entity\User;
use Drupal\message\Entity\Message;
use Drupal\user\UserInterface;
use Drupal\Core\Url;
use Drupal\Core\Field\FieldItemListInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\ldap_servers\Entity\Server;
use Drupal\ldap_servers\LdapGroupManager;
use Symfony\Component\Ldap\Entry;
use Symfony\Component\Ldap\Exception\LdapException;

/**
 * Implements hook_ENTITY_TYPE_presave() for user entities.
 *
 * This method captures the CAS username and runs an LDAP query to ensure ou=LIBR-*.
 *
 * In the event that an authenticated user is creating this user via the user-creation form,
 * handling is different and doesn't redirect to home.
 */
function validate_staff_user_presave (UserInterface $account) {

  // Check if any of this LIBR-* checking is necessary for this account
  $skipLDAP = $account->get('field_skip_ldap')->getString();
  if (!$skipLDAP) {
    $messenger = \Drupal::messenger();

    $name = $account->getAccountName();

    $ldap_bridge = \Drupal::service('ldap.bridge');
    $server = Server::load('umd');
    $ldap_bridge->setServerById('umd');
    $result = null;
    if ($ldap_bridge->bind()) {
      $ldap = $ldap_bridge->get();
      $filter = "(&(uid=" . $name . ")(ou=LIBR-*))";
      $dn = $server->getBaseDn();

      try {
        $result = $ldap->query(reset($dn), $filter)->execute();
      }
      catch (LdapException $e) {
        \Drupal::logger('validate_staff')
              ->error($e->getMessage());
      }
    }

    // If no results, assume ou != LIBR-*
    if ($result == null || $result.count() < 1) {
      $message = t('This blog is available only to UMD Library Staff and Faculty');
      $currentUser = \Drupal::currentUser();
      if ($currentUser->isAuthenticated()) {
        // In this event, the user is being created manually via form
        $message = t('User does not have LDAP ou=LIBR-*');
        $response = new RedirectResponse(\Drupal::request()->getRequestUri());
      } else {
        // In this event, the process is automated likely via CAS
        // $response = new RedirectResponse(\Drupal::url('<front>'));
        $url = \Drupal\Core\Url::fromRoute('<front>')->toString();
        $response = new RedirectResponse($url);
        $tokens = ['%drupal_username' => $name];
        \Drupal::logger('validate_staff')
          ->error('Drupal account %drupal_username is blocked because not found LIBR-*.', $tokens);
      }
      $response->send();
      $messenger->addMessage($message, $messenger::TYPE_WARNING);
      exit;
    }
    else {
      $account->addRole('library_staff');
    }
  }

}

/**
 * Implements hook_form_alter().
 */
function validate_staff_form_alter(&$form, &$form_state, $form_id) {
  if($form_id=='user_form') {
    $currentUser = \Drupal::currentUser();
    $isAdmin = $currentUser->hasPermission('access administration pages');  
    if($isAdmin == 1) {
      $form['field_skip_ldap']['#access']= TRUE;
    }
    else{
      $form['field_skip_ldap']['#access']= FALSE;
    }
  }
}


/**
 * Implements hook_user_format_name_alter().
 */
function validate_staff_user_format_name_alter(&$name, $account) {
  $member = \Drupal\user\Entity\User::load($account->id());
  if (!empty($member->field_custom_name->value)) {
    $custom_name = $member->field_custom_name->value;
    $name = t('@custom_name', ['@custom_name' => $custom_name]);
  }
}
